def create_model(X_train, y_train, X_test, y_test):
	model = Sequential()
	model.add(Dense(
		{{choice([100, 150, 256, 300, 512])}}, 
		input_dim=300, 
		activation={{choice(['relu', 'tanh'])}}))
	model.add(Dropout({{uniform(0, 1)}}))

	n_hidden = {{choice(['one', 'two', 'three'])}}

	if n_hidden != 'one':
		model.add(Dense(
			{{choice([100, 150, 256, 300, 512])}},
			activation={{choice(['relu', 'tanh'])}}))
		model.add(Dropout({{uniform(0, 1)}}))

		if n_hidden != 'two':
			model.add(Dense(
				{{choice([100, 150, 256, 300, 512])}},
				activation={{choice(['relu', 'tanh'])}}))
			model.add(Dropout({{uniform(0, 1)}}))
	
	model.add(Dense(1, activation='sigmoid'))
	model.compile(loss='binary_crossentropy',
					optimizer={{choice(['rmsprop', 'adam', 'sgd'])}},
					metrics=['accuracy'])

	result = model.fit(X_train, y_train,
		batch_size={{choice([16, 32, 64, 128])}},
		epochs={{choice([25, 50, 150])}},
		verbose=2,
		validation_split=0.1)
	#get the highest validation accuracy of the training epochs
	validation_acc = np.amax(result.history['val_acc']) 
	print('Best validation acc of epoch:', validation_acc)
	return {'loss': -validation_acc, 'status': STATUS_OK, 'model': model}

best_run, best_model = optim.minimize(
	model=create_model,
	data=data,
	algo=tpe.suggest,
	max_evals=100,
	trials=Trials())

Evalutation of best performing model:
108/108 [==============================] - 0s 344us/step
[0.5632826244389569, 0.9259259281335054]
Best performing model chosen hyper-parameters:
{'Dense': 3, 'Dense_1': 4, 'Dense_2': 3, 'Dropout': 0.5442420919810019, 'Dropout_1': 0.43404126142165134, 'Dropout_2': 0.6975075528853121, 'activation': 0, 'activation_1': 1, 'activation_2': 0, 'batch_size': 0, 'epochs': 1, 'n_hidden': 2, 'optimizer': 0}



Evalutation of best performing model:
108/108 [==============================] - 0s 283us/step
[0.7423749367396036, 0.8518518496442724]
Best performing model chosen hyper-parameters:
{'Dense': 13, 'Dense_1': 10, 'Dense_2': 12, 'Dense_3': 7, 'Dense_4': 7, 'Dense_5': 14, 'Dropout': 0.8469072279547732, 'Dropout_1': 0.3210389307864787, 'Dropout_2': 0.5948712568443267, 'Dropout_3': 0.4970559482092457, 'Dropout_4': 0.06765709934504838, 'Dropout_5': 0.9662681038993752, 'activation': 0, 'activation_1': 1, 'activation_2': 0, 'activation_3': 0, 'activation_4': 1, 'activation_5': 0, 'batch_size': 0, 'n_hidden': 1, 'optimizer': 0}


